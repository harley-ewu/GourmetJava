plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'jacoco'
}

group 'com.madrapps'
version '1.0-SNAPSHOT'

group 'io.codecov'
version '1.0'

sourceCompatibility = 18
targetCompatibility = 18

sourceSets {
    main {
        java {
            srcDirs = ['src/main/']  // Change the default main source directory
        }
        resources {
            srcDirs = ['src/main/resources']  // Change the default main resources directory
        }
    }

    test {
        java {
            srcDirs = ['src/test']  // Change the default test source directory
        }
        resources {
            srcDirs = ['src/test/resources']  // Change the default test resources directory
        }
    }
}

// jacoco { toolVersion '0.8.10' }

// task.withType(Test) {
//     jacoco.includeNoLocationClasses = true
//     jacoco.excludes = ['jdk.internal.*']

// }

jar {
    manifest {
        attributes('Main-Class': 'j.Main')
    }
}

shadowJar {
    // sets the base name of the shadow jar
    archiveBaseName.set('shadow')
    // sets the classifier of the shadow jar which will be none in this case. 
    archiveClassifier.set('')
    // sets the version of the shadow jar which will be none in this case and will not be added to the end of the jar name.
    archiveVersion.set('')
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'junit:junit:4.13.1'
    implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'
    implementation group: 'org.jline', name: 'jline', version: '3.24.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled enabled
    }
}

check.dependsOn jacocoTestReport

// tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

//     group = "Reporting"
//     description = "Generate Jacoco coverage reports for the test build."

//     reports {
//         html.required.set(true)
//         xml.required.set(true)
//     }

//     def excludes = [
//             '**/*Test*.*',
//             '**/actions/*.*',
//             '**/core/*.*',
//             '**/markers/*.*',
//             '**/services/**/*.*',
//             '**/toolwindow/*.*',
//             '**/utils/*.*'
//     ]

//     def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
//     classDirectories.from = files([javaClasses])
//     afterEvaluate {
//         classDirectories.setFrom(files(classDirectories.files.collect {
//             fileTree(dir: it,
//                      exclude: ['**/SomeExcludedClass.class'])
//         }))
//     }

//     sourceDirectories.from = files([
//             "$project.projectDir/src/main/java",
//             "$buildDir/generated/source/kapt/test"
//     ])

//     executionData.from = files("${project.buildDir}/jacoco/test.exec")
// }

// task testCoverage(type: JacocoReport, dependsOn: ['test']) {
//     sourceDirectories = files(sourceSets.main.allJava.srcDirs)
//     classDirectories = files(sourceSets.main.output)
//     executionData = files('build/jacoco/test.exec')
//     reports {
//         xml.required = true
//         html.required = true
//     }
// }

repositories {
    google()
    mavenCentral()
}